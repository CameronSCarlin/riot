runApp()
x <- matchdf[c("championName", "Role", "Kills", "Assists", "Deaths", "Winner")]
x["Winner"] <- as.character(x$Winner)
x
x <- x[(x$Winner == "Yes")]
x <- x[(x$Winner == "Yes"),]
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x
x <- x %>%
group_by(championName, Role) %>%
summarise(Count = nrow(championName),
Kcount = mean(Kills, na.rm = TRUE),
Acount = mean(Assists, na.rm = TRUE),
Dcount = mean(Deaths, na.rm = TRUE)
) %>%
as.data.frame()
x <- x %>%
group_by(championName, Role) %>%
summarise(Count = length(championName),
Kcount = mean(Kills, na.rm = TRUE),
Acount = mean(Assists, na.rm = TRUE),
Dcount = mean(Deaths, na.rm = TRUE)
) %>%
as.data.frame()
x
runApp()
tm <- treemap(x,
index=c("Role", "championName"),
vSize="Count",
vColor="Score",
type="value",
palette = "RdYlBu",
format.legend = list(scientific = FALSE, big.mark = " "))
x["Score"] <- (x$Kcount + x$Acount) / x$Dcount
tm <- treemap(x,
index=c("Role", "championName"),
vSize="Count",
vColor="Score",
type="value",
palette = "RdYlBu",
format.legend = list(scientific = FALSE, big.mark = " "))
d3tree2(tm, rootname = "Champions Tree Map")
x
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?coord_flip
runApp()
?filter
library(zoo)
runApp()
?rollmean
runApp()
runApp()
runApp()
gametime <- matchdf2[c("matchteamId", "matchDuration", "winner", "kills", "deaths", "assists",
"endGold", "endDamage", "endCreeps", "endXp")]
gametime
gametime <- gametime %>%
group_by(matchteamId, matchDuration, winner) %>%
summarise(teamGold = sum(endGold, na.rm = TRUE),
teamKills = sum(kills, na.rm = TRUE),
teamDeaths = sum(deaths, na.rm = TRUE),
teamAssists = sum(assists, na.rm = TRUE),
teamDamage = sum(endDamage, na.rm = TRUE),
teamCreeps = sum(endCreeps, na.rm = TRUE),
teamXp = sum(endXp, na.rm = TRUE)) %>%
as.data.frame()
gametime
f21 <- rep(1/21,21)
y_sym <- filter(gametime$teamGold, f21, sides=2)
gametime$teamGold
gametime$teamGold[1]
gametime$teamGold
y_sym <- filter(gametime$teamGold, f21, sides=2)
?filter
as.ts(gametime$teamGold)
y_sym <- filter(as.ts(gametime$teamGold), f21, sides=2)
y_sym <- stats::filter(gametime$teamGold, f21, sides=2)
lines(x, y_sym, col="blue")
y_sym
gametime$teamGold
y_sym
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
y_sym <- stats::filter(gametime["teamGold"], f21, sides=2)
gametime[paste0("teamGold", "ma")] <- y_sym
View(gametime)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
temp.gametime <- zoo(gametime["teamGold"], gametime$matchDuration)
m.av <- rollmean(temp.gametime, 3, fill = list(NA, NULL, NA))
gametime$amb.av <- coredata(m.av)
gametime["matchDuration"] <- as.ts(gametime["matchDuration"])
temp.gametime <- zoo(gametime["teamGold"], gametime$matchDuration)
m.av <- rollmean(temp.gametime, 3, fill = list(NA, NULL, NA))
gametime$amb.av <- coredata(m.av)
gametime <- matchdf2[c("matchteamId", "matchDuration", "winner", "kills", "deaths", "assists",
"endGold", "endDamage", "endCreeps", "endXp")]
gametime <- gametime %>%
group_by(matchDuration, winner) %>%
summarise(teamGold = mean(endGold, na.rm = TRUE),
teamKills = mean(kills, na.rm = TRUE),
teamDeaths = mean(deaths, na.rm = TRUE),
teamAssists = mean(assists, na.rm = TRUE),
teamDamage = mean(endDamage, na.rm = TRUE),
teamCreeps = mean(endCreeps, na.rm = TRUE),
teamXp = mean(endXp, na.rm = TRUE)) %>%
as.data.frame()
gametime
gametime <- matchdf2[c("matchteamId", "matchDuration", "winner", "kills", "deaths", "assists",
"endGold", "endDamage", "endCreeps", "endXp")]
gametime <- gametime %>%
group_by(matchteamId, matchDuration, winner) %>%
summarise(teamGold = sum(endGold, na.rm = TRUE),
teamKills = sum(kills, na.rm = TRUE),
teamDeaths = sum(deaths, na.rm = TRUE),
teamAssists = sum(assists, na.rm = TRUE),
teamDamage = sum(endDamage, na.rm = TRUE),
teamCreeps = sum(endCreeps, na.rm = TRUE),
teamXp = sum(endXp, na.rm = TRUE)) %>%
as.data.frame()
gametime
matchdf2 <- read.csv('matchdf.csv', stringsAsFactors = FALSE)
matchdf2$winner <- as.factor(matchdf2$winner)
levels(matchdf2$winner) <- list('No'="0",'Yes'="1")
gametime <- matchdf2[c("matchteamId", "matchDuration", "winner", "kills", "deaths", "assists",
"endGold", "endDamage", "endCreeps", "endXp")]
gametime
gametime1 <- gametime[gametime$winner == "Yes"]
gametime1 <- gametime[gametime$winner == "Yes",]
gametime2 <- gametime[gametime$winner == "Yes",]
gametime1 <- gametime[gametime$winner == "Yes",]
gametime2 <- gametime[gametime$winner == "No",]
temp.gametime <- zoo(gametime1["teamGold"], gametime1$matchDuration)
gametime1
matchdf2 <- read.csv('matchdf.csv', stringsAsFactors = FALSE)
matchdf2$winner <- as.factor(matchdf2$winner)
levels(matchdf2$winner) <- list('No'="0",'Yes'="1")
gametime <- matchdf2[c("matchteamId", "matchDuration", "winner", "kills", "deaths", "assists",
"endGold", "endDamage", "endCreeps", "endXp")]
gametime <- gametime %>%
group_by(matchteamId, matchDuration, winner) %>%
summarise(teamGold = sum(endGold, na.rm = TRUE),
teamKills = sum(kills, na.rm = TRUE),
teamDeaths = sum(deaths, na.rm = TRUE),
teamAssists = sum(assists, na.rm = TRUE),
teamDamage = sum(endDamage, na.rm = TRUE),
teamCreeps = sum(endCreeps, na.rm = TRUE),
teamXp = sum(endXp, na.rm = TRUE)) %>%
as.data.frame()
gametime1 <- gametime[gametime$winner == "Yes",]
gametime2 <- gametime[gametime$winner == "No",]
gametime1
temp.gametime <- zoo(gametime1["teamGold"], gametime1$matchDuration)
gametime <- gametime %>%
group_by(matchteamId, matchDuration, winner) %>%
summarise(teamGold = sum(endGold, na.rm = TRUE),
teamKills = sum(kills, na.rm = TRUE),
teamDeaths = sum(deaths, na.rm = TRUE),
teamAssists = sum(assists, na.rm = TRUE),
teamDamage = sum(endDamage, na.rm = TRUE),
teamCreeps = sum(endCreeps, na.rm = TRUE),
teamXp = sum(endXp, na.rm = TRUE)) %>%
as.data.frame()
gametime <- matchdf2[c("matchteamId", "matchDuration", "winner", "kills", "deaths", "assists",
"endGold", "endDamage", "endCreeps", "endXp")]
gametime <- gametime %>%
group_by(matchteamId, matchDuration, winner) %>%
summarise(teamGold = sum(endGold, na.rm = TRUE),
teamKills = sum(kills, na.rm = TRUE),
teamDeaths = sum(deaths, na.rm = TRUE),
teamAssists = sum(assists, na.rm = TRUE),
teamDamage = sum(endDamage, na.rm = TRUE),
teamCreeps = sum(endCreeps, na.rm = TRUE),
teamXp = sum(endXp, na.rm = TRUE)) %>%
as.data.frame()
gametime1 <- gametime[gametime$winner == "Yes",]
gametime2 <- gametime[gametime$winner == "No",]
gametime1 <- gametime1 %>%
group_by(matchDuration) %>%
summarise(teamGold = mean(endGold, na.rm = TRUE),
teamKills = mean(kills, na.rm = TRUE),
teamDeaths = mean(deaths, na.rm = TRUE),
teamAssists = mean(assists, na.rm = TRUE),
teamDamage = mean(endDamage, na.rm = TRUE),
teamCreeps = mean(endCreeps, na.rm = TRUE),
teamXp = mean(endXp, na.rm = TRUE)) %>%
as.data.frame()
gametime1 <- gametime1 %>%
group_by(matchDuration) %>%
summarise(teamGold = mean(teamGold, na.rm = TRUE),
teamKills = mean(teamKills, na.rm = TRUE),
teamDeaths = mean(teamDeaths, na.rm = TRUE),
teamAssists = mean(teamAssists, na.rm = TRUE),
teamDamage = mean(teamDamage, na.rm = TRUE),
teamCreeps = mean(teamCreeps, na.rm = TRUE),
teamXp = mean(teamXp, na.rm = TRUE)) %>%
as.data.frame()
gametime1
temp.gametime <- zoo(gametime1["teamGold"], gametime1$matchDuration)
m.av <- rollmean(temp.gametime, 3, fill = list(NA, NULL, NA))
gametime$amb.av <- coredata(m.av)
gametime1$amb.av <- coredata(m.av)
gametime2 <- gametime2 %>%
group_by(matchDuration) %>%
summarise(teamGold = mean(teamGold, na.rm = TRUE),
teamKills = mean(teamKills, na.rm = TRUE),
teamDeaths = mean(teamDeaths, na.rm = TRUE),
teamAssists = mean(teamAssists, na.rm = TRUE),
teamDamage = mean(teamDamage, na.rm = TRUE),
teamCreeps = mean(teamCreeps, na.rm = TRUE),
teamXp = mean(teamXp, na.rm = TRUE)) %>%
as.data.frame()
temp.gametime2 <- zoo(gametime2["teamGold"], gametime2$matchDuration)
m.av <- rollmean(temp.gametime2, 3, fill = list(NA, NULL, NA))
gametime2$amb.av <- coredata(m.av)
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(alpha=0.8)
fmetime1
gametime1
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(alpha=0.8) + geom_line(gametime1, aes_string("matchDuration", "teamGold", color="winner"))
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(alpha=0.8) + geom_line(gametime1, aes_string("matchDuration", "teamGold"))
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(alpha=0.8) + geom_line(date=gametime1, aes_string("matchDuration", "teamGold"))
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(alpha=0.8) + geom_line(date=gametime1, aes_string("matchDuration", "teamGold", color="winner"))
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(alpha=0.8) + geom_line(data=gametime1, aes_string("matchDuration", "teamGold", color="winner"))
gametime1
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(alpha=0.8) + geom_line(data=gametime1, aes_string("matchDuration", "teamGold"))
gametime
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(alpha=0.8)
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(alpha=0.8) + geom_line(data=gametime1, aes_string("matchDuration", "teamGold"))
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(alpha=0.8) + geom_line(gametime1, aes_string("matchDuration", "teamGold"))
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(gametime1, aes_string("matchDuration", "teamGold"))
ggplot(gametime, aes_string("matchDuration", "teamGold", color="winner")) +
geom_line(data = gametime1, aes_string("matchDuration", "teamGold"))
ggplot(gametime, aes_string(x="matchDuration", y="teamGold", color="winner")) + geom_line()
ggplot(gametime, aes_string(x="matchDuration", y="teamGold", color="winner")) + geom_line() +
geom_line(data = gametime1, aes_string("matchDuration", "teamGold"), show_guide = FALSE)
ggplot(gametime, aes_string(x="matchDuration", y="teamGold", color="winner")) + geom_line() +
geom_line(data = gametime1, aes_string("matchDuration", "teamGold", color = "Blue"), show_guide = FALSE)
ggplot(gametime, aes_string(x="matchDuration", y="teamGold", color="winner")) + geom_line() +
geom_line(data = gametime1, aes_string("matchDuration", "teamGold", colour = "Blue"))
ggplot(gametime, aes_string(x="matchDuration", y="teamGold", color="winner")) + geom_line() +
geom_line(data = gametime1, aes_string("matchDuration", "teamGold", colour = "#000099"))
ggplot(gametime1, aes_string(x="matchDuration", y="teamGold")) + geom_line()
gametime1
gametime1 <- gametime[gametime$winner == "Yes",]
gametime1 <- gametime1 %>%
group_by(matchDuration) %>%
summarise(teamGold = mean(teamGold, na.rm = TRUE),
teamKills = mean(teamKills, na.rm = TRUE),
teamDeaths = mean(teamDeaths, na.rm = TRUE),
teamAssists = mean(teamAssists, na.rm = TRUE),
teamDamage = mean(teamDamage, na.rm = TRUE),
teamCreeps = mean(teamCreeps, na.rm = TRUE),
teamXp = mean(teamXp, na.rm = TRUE)) %>%
as.data.frame()
temp.gametime1 <- zoo(gametime1["teamGold"], gametime1$matchDuration)
m.av <- rollmean(temp.gametime1, 11, fill = list(NA, NULL, NA))
gametime1$amb.av <- coredata(m.av)
ggplot(gametime1, aes_string(x="matchDuration", y="teamGold")) + geom_line()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?geom_smooth
gametime$smooth<-rollmean(gametime$teamGold,3,fill="extend") # 2nd parameter defines smoothness
gametime
runApp()
runApp()
runApp()
gametime
plot(gametime$smooth)
plot(gametime$matchDuration, gametime$smooth)
gametime$smooth<-rollmean(gametime$teamGold,7,fill="extend") # 2nd parameter defines smoothness
plot(gametime$matchDuration, gametime$smooth)
gametime$smooth
plot(gametime$matchDuration, gametime$smooth)
gametime
temp1.zoo <- zoo(gametime[gametime$winner == "Yes",]$teamGold, gametime[gametime$winner == "Yes",]$matchDuration)
temp2.zoo <- zoo(gametime[gametime$winner == "No",]$teamGold, gametime[gametime$winner == "No",]$matchDuration)
temp1 <-
temp1.zoo <- zoo(gametime[gametime$winner == "Yes",]$teamGold, as.ts(gametime[gametime$winner == "Yes",]$matchDuration))
temp1 <- gametime[gametime$winner == "Yes",]$teamGold, gametime[gametime$winner == "Yes",]$matchDuration]
temp1 <- data.frame(gametime[gametime$winner == "Yes",]$teamGold, gametime[gametime$winner == "Yes",]$matchDuration)
temp1
temp1
temp1 <- data.frame("teamGold"=gametime[gametime$winner == "Yes",]$teamGold,
"matchDuration"=gametime[gametime$winner == "Yes",]$matchDuration)
temp1[]
sort(temp1["matchDuration"])
sort(temp1["matchDuration",])
temp1[order(temp1$matchDuration),c(1,2)]
temp1 <- temp1 %>%
group_by(matchDuration) %>%
summarise(teamGold = mean(teamGold, na.rm = TRUE)) %>%
as.data.frame()
temp1.zoo <- zoo(gametime[gametime$winner == "Yes",]$teamGold, as.ts(gametime[gametime$winner == "Yes",]$matchDuration))
temp1.zoo <- zoo(temp1$teamGold, temp1$matchDuration)
m.av <- rollmean(temp1.zoo,10,fill=list(NA,NULL,NA))
gametime$teamGold.av = coredata(m.av)
twmp
m.av
temp1.zoo$teamGold.av = coredata(m.av)
plot(m.av)
m.av <- rollmean(temp1.zoo,20,fill=list(NA,NULL,NA))
plot(m.av)
temp1
temp1$teamGold.av = coredata(m.av)
ggplot(data=temp1, aes(matchDuration, teamGold.av)+geom_line()
output$stats <- renderPlotly({
#Add calculated moving averages to existing data frame
p29$amb.av=coredata(m.av)
ggplotly(
ggplot(gametime, aes_string("matchDuration", input$teamstats, color="winner")) +
geom_line(alpha=0.8) +
geom_smooth(aes_string(x="matchDuration", input$teamstats, col="winner", fill="winner"), size=1) +
xlab("Match Duration (s)") + ylab("Team Stats") +
scale_color_manual(values = c("#BC403E", "#5285C4")) +
theme(
axis.title.x = element_text(),
axis.title.y = element_text(),
panel.background = element_blank(),
panel.grid.major = element_line(colour='grey'),
panel.border = element_rect(color = 'grey', fill=NA)
)
) %>% layout(margin = list(l=-50, r=20, b=0, t=50, pad=0),
xaxis = list(title = "Match Duration (s)", anchor="free"),
yaxis = list(title = "Team Stats", anchor="free"),
legend = list(title = "Winner", orientation = "h", xanchor = "center",
yanchor = "top", y = -0.13, x = 0.54)) %>%
add_annotations( text="Winner", xref="paper", yref="paper",
x=0.43, xanchor="center",
y=-0.139, yanchor="top", legendtitle=TRUE, showarrow=FALSE)
})
####### Parallel Coordinates Plot #######
output$parcoordplot <- renderPlotly({
if (input$parcoordInput == 'Winner'){
scale_pcp <- c("#BC403E", "#5285C4")
}
if (input$parcoordInput == 'Rank'){
scale_pcp <- c('#543950','#cd7f32','#C0C0C0', '#FFD700','#cecfe2', '#c6dde2')
}
if (input$parcoordInput == 'Role') {
scale_pcp <- c('#db0000','#93004a','#0000db','#934a00','#00b75c','#002727')
}
match_subset2 <- match_subset[c(runif(length(match_subset),0,1)>.75),]
ggplotly(
ggparcoord(match_subset2, c(7,8,9,12,13,14), groupColumn = input$parcoordInput,
scale='globalminmax',
title = 'Player Differentiation by Style and Rank',
alpha= 0.25)+
scale_x_discrete(labels=c('Baron Kills',
'Dragon Kills',
'Tower Kills',
'Kills',
'Deaths',
'Assists'))+
ylab("Count")+
scale_color_manual(values=scale_pcp)+
theme(
axis.title.x = element_blank(),
axis.title.y = element_text(),
panel.background = element_blank(),
panel.grid.major = element_line(colour='grey'),
panel.border = element_rect(color = 'grey', fill=NA)
),tooltip = c("x",'y'))
})
####### Tree Map #######
x <- matchdf[c("championName", "Role", "Kills", "Assists", "Deaths", "Winner")]
# x$Winner <- as.character(x$Winner)
# x$Winner[which(x$Winner == "Yes")] <- 1
# x$Winner[which(x$Winner == "No")] <- 0
# choice <- reactive({ input$champtree })
# x <- x[(x$Winner == reactive({ choice() }) ),]
output$treemap <- renderD3tree2({
x <- x[(x$Winner == input$champtree ),]
x <- x %>%
group_by(championName, Role) %>%
summarise(Count = length(championName),
Kcount = mean(Kills, na.rm = TRUE),
Acount = mean(Assists, na.rm = TRUE),
Dcount = mean(Deaths, na.rm = TRUE)
) %>%
as.data.frame()
x["Score"] <- (x$Kcount + x$Acount) / x$Dcount
tm <- treemap(x,
index=c("Role", "championName"),
vSize="Score",
vColor="Count",
type="value",
palette = "RdYlBu",
format.legend = list(scientific = FALSE, big.mark = " "))
d3tree2(tm, rootname = "Champions Tree Map")
})
})
ggplot(data=temp1, aes(matchDuration, teamGold.av)) + geom_line()
temp1 <- data.frame("teamGold"=gametime[gametime$winner == "Yes",]["teamGold"],
"matchDuration"=gametime[gametime$winner == "Yes",]$matchDuration)
temp1 <- data.frame("teamGold"=gametime[gametime$winner == "Yes",]["teamGold"],
"matchDuration"=gametime[gametime$winner == "Yes",]["teamDuration"])
gametime <- gametime %>%
group_by(matchteamId, matchDuration, winner) %>%
summarise(teamGold = sum(endGold, na.rm = TRUE),
teamKills = sum(kills, na.rm = TRUE),
teamDeaths = sum(deaths, na.rm = TRUE),
teamAssists = sum(assists, na.rm = TRUE),
teamDamage = sum(endDamage, na.rm = TRUE),
teamCreeps = sum(endCreeps, na.rm = TRUE),
teamXp = sum(endXp, na.rm = TRUE)) %>%
as.data.frame()
gametime <- matchdf2[c("matchteamId", "matchDuration", "winner", "kills", "deaths", "assists",
"endGold", "endDamage", "endCreeps", "endXp")]
gametime <- gametime %>%
group_by(matchteamId, matchDuration, winner) %>%
summarise(teamGold = sum(endGold, na.rm = TRUE),
teamKills = sum(kills, na.rm = TRUE),
teamDeaths = sum(deaths, na.rm = TRUE),
teamAssists = sum(assists, na.rm = TRUE),
teamDamage = sum(endDamage, na.rm = TRUE),
teamCreeps = sum(endCreeps, na.rm = TRUE),
teamXp = sum(endXp, na.rm = TRUE)) %>%
as.data.frame()
temp1 <- data.frame("teamGold"=gametime[gametime$winner == "Yes",]["teamGold"],
"matchDuration"=gametime[gametime$winner == "Yes",]["teamDuration"])
gametime
temp1 <- data.frame("teamGold"=gametime[gametime$winner == "Yes",]["teamGold"],
"matchDuration"=gametime[gametime$winner == "Yes",]["matchDuration"])
temp1 <- temp1 %>%
group_by(matchDuration) %>%
summarise(teamGold = mean("teamGold", na.rm = TRUE)) %>%
as.data.frame()
temp1
temp1 <- gametime[gametime$winner == "Yes",]
temp1
temp2 <- gametime[gametime$winner == "No",]
temp1 <- temp1 %>%
group_by(matchDuration) %>%
summarise(teamGold = mean(teamGold, na.rm = TRUE),
teamKills = mean(kills, na.rm = TRUE),
teamDeaths = mean(deaths, na.rm = TRUE),
teamAssists = mean(assists, na.rm = TRUE),
teamDamage = mean(endDamage, na.rm = TRUE),
teamCreeps = mean(endCreeps, na.rm = TRUE),
teamXp = mean(endXp, na.rm = TRUE)) %>%
as.data.frame()
temp1 <- temp1 %>%
group_by(matchDuration) %>%
summarise(teamGold = mean(teamGold, na.rm = TRUE),
teamKills = mean(teamKills, na.rm = TRUE),
teamDeaths = mean(teamDeaths, na.rm = TRUE),
teamAssists = mean(teamAssists, na.rm = TRUE),
teamDamage = mean(teamDamage, na.rm = TRUE),
teamCreeps = mean(teamCreeps, na.rm = TRUE),
teamXp = mean(teamXp, na.rm = TRUE)) %>%
as.data.frame()
runApp()
runApp()
temp1
runApp()
runApp()
runApp()
?coord_flip
runApp()
runApp()
runApp()
runApp()
palette()
palette.HCL.options
RColorBrewer
library(RColorBrewer)
display.brewer.all(
)
runApp()
runApp()
runApp()
runApp()
